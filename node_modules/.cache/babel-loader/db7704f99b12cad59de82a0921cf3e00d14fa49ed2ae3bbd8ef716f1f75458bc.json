{"ast":null,"code":"import { colorToRgb, getLinkColor } from \"../../../Utils/ColorUtils\";\nimport { drawLinkLine, drawLinkTriangle } from \"../../../Utils/CanvasUtils\";\nimport { getDistance, getRangeValue } from \"../../../Utils/NumberUtils\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n  }\n  particleCreated(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n  particleDestroyed(particle) {\n    const linkParticle = particle;\n    linkParticle.links = [];\n  }\n  drawParticle(context, particle) {\n    const linkParticle = particle,\n      container = this.container,\n      particles = container.particles,\n      pOptions = particle.options;\n    if (linkParticle.links.length <= 0) {\n      return;\n    }\n    context.save();\n    const p1Links = linkParticle.links.filter(l => {\n      const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n      return linkFreq <= pOptions.links.frequency;\n    });\n    for (const link of p1Links) {\n      const p2 = link.destination;\n      if (pOptions.links.triangles.enable) {\n        const links = p1Links.map(l => l.destination),\n          vertices = p2.links.filter(t => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n          });\n        if (vertices.length) {\n          for (const vertex of vertices) {\n            const p3 = vertex.destination,\n              triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n            if (triangleFreq > pOptions.links.triangles.frequency) {\n              continue;\n            }\n            this.drawLinkTriangle(linkParticle, link, vertex);\n          }\n        }\n      }\n      if (link.opacity > 0 && container.retina.linksWidth > 0) {\n        this.drawLinkLine(linkParticle, link);\n      }\n    }\n    context.restore();\n  }\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link1.destination,\n      p3 = link2.destination,\n      triangleOptions = p1.options.links.triangles,\n      opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    if (opacityTriangle <= 0) {\n      return;\n    }\n    const pos1 = p1.getPosition(),\n      pos2 = p2.getPosition(),\n      pos3 = p3.getPosition();\n    container.canvas.draw(ctx => {\n      if (getDistance(pos1, pos2) > container.retina.linksDistance || getDistance(pos3, pos2) > container.retina.linksDistance || getDistance(pos3, pos1) > container.retina.linksDistance) {\n        return;\n      }\n      let colorTriangle = colorToRgb(triangleOptions.color);\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n          linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorTriangle) {\n        return;\n      }\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n  drawLinkLine(p1, link) {\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link.destination,\n      pos1 = p1.getPosition(),\n      pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b;\n      let colorLine;\n      const twinkle = p1.options.twinkle.lines;\n      if (twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n          twinkleRgb = colorToRgb(twinkle.color),\n          twinkling = Math.random() < twinkleFreq;\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n          linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorLine) {\n        return;\n      }\n      const width = (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth,\n        maxDistance = (_b = p1.retina.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n}","map":{"version":3,"names":["colorToRgb","getLinkColor","drawLinkLine","drawLinkTriangle","getDistance","getRangeValue","LinkInstance","constructor","container","particleCreated","particle","linkParticle","links","particleDestroyed","drawParticle","context","particles","pOptions","options","length","save","p1Links","filter","l","linkFreq","getLinkFrequency","destination","frequency","link","p2","triangles","enable","map","vertices","t","indexOf","vertex","p3","triangleFreq","getTriangleFrequency","opacity","retina","linksWidth","restore","p1","link1","link2","_a","actualOptions","triangleOptions","opacityTriangle","pos1","getPosition","pos2","pos3","canvas","draw","ctx","linksDistance","colorTriangle","color","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","backgroundMask","composite","_b","colorLine","twinkle","lines","twinkleFreq","twinkleRgb","twinkling","Math","random","width","maxDistance","size","warp","shadow"],"sources":["C:/Users/prana/Downloads/My E Health/demo-3/Text-Summarizer-main/node_modules/tsparticles/esm/Interactions/Particles/Links/LinkInstance.js"],"sourcesContent":["import { colorToRgb, getLinkColor } from \"../../../Utils/ColorUtils\";\nimport { drawLinkLine, drawLinkTriangle } from \"../../../Utils/CanvasUtils\";\nimport { getDistance, getRangeValue } from \"../../../Utils/NumberUtils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    particleCreated(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    particleDestroyed(particle) {\n        const linkParticle = particle;\n        linkParticle.links = [];\n    }\n    drawParticle(context, particle) {\n        const linkParticle = particle, container = this.container, particles = container.particles, pOptions = particle.options;\n        if (linkParticle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = linkParticle.links.filter((l) => {\n            const linkFreq = container.particles.getLinkFrequency(linkParticle, l.destination);\n            return linkFreq <= pOptions.links.frequency;\n        });\n        for (const link of p1Links) {\n            const p2 = link.destination;\n            if (pOptions.links.triangles.enable) {\n                const links = p1Links.map((l) => l.destination), vertices = p2.links.filter((t) => {\n                    const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n                    return linkFreq <= p2.options.links.frequency && links.indexOf(t.destination) >= 0;\n                });\n                if (vertices.length) {\n                    for (const vertex of vertices) {\n                        const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(linkParticle, p2, p3);\n                        if (triangleFreq > pOptions.links.triangles.frequency) {\n                            continue;\n                        }\n                        this.drawLinkTriangle(linkParticle, link, vertex);\n                    }\n                }\n            }\n            if (link.opacity > 0 && container.retina.linksWidth > 0) {\n                this.drawLinkLine(linkParticle, link);\n            }\n        }\n        context.restore();\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition();\n        container.canvas.draw((ctx) => {\n            if (getDistance(pos1, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos2) > container.retina.linksDistance ||\n                getDistance(pos3, pos1) > container.retina.linksDistance) {\n                return;\n            }\n            let colorTriangle = colorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b;\n            let colorLine;\n            const twinkle = p1.options.twinkle.lines;\n            if (twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = colorToRgb(twinkle.color), twinkling = Math.random() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = linksOptions.id !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, maxDistance = (_b = p1.retina.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}