{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n    _Particles_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n  get count() {\n    return this.array.length;\n  }\n  init() {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this.addManualParticles();\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n    container.pathGenerator.init(container);\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n  async update(delta) {\n    const container = this.container,\n      particlesToDelete = [];\n    container.pathGenerator.update();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      particle.bubble.inRange = false;\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n    await this.interactionManager.externalInteract(delta);\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n  }\n  async draw(delta) {\n    const container = this.container,\n      canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n    this.pushing = false;\n  }\n  addParticle(position, overrideOptions, group) {\n    const container = this.container,\n      options = container.actualOptions,\n      limit = options.particles.number.limit * container.density;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this.pushParticle(position, overrideOptions, group);\n  }\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split,\n      options = new ParticlesOptions();\n    options.load(parent.options);\n    const factor = getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n      position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset)\n      };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  getLinkFrequency(p1, p2) {\n    const range = setRangeValue(p1.id, p2.id),\n      key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n    let res = this.freqs.links.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.links.set(key, res);\n    }\n    return res;\n  }\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.triangles.set(key, res);\n    }\n    return res;\n  }\n  addManualParticles() {\n    const container = this.container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }), particle.options);\n    }\n  }\n  setDensity() {\n    const options = this.container.actualOptions;\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n  handleClickMode(mode) {\n    this.interactionManager.handleClickMode(mode);\n  }\n  applyDensity(options, manualCount, group) {\n    var _a;\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n    const numberOptions = options.number,\n      densityFactor = this.initDensityFactor(numberOptions.density),\n      optParticlesNumber = numberOptions.value,\n      optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n      particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n      particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n    const canvas = container.canvas.element,\n      pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n      if (!canAdd) {\n        return;\n      }\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n}\n_Particles_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","calcPositionFromSize","getRangeMax","getRangeMin","getRangeValue","randomInRange","setRangeValue","InteractionManager","Particle","ParticlesOptions","Point","QuadTree","Rectangle","Particles","constructor","engine","container","nextId","array","zArray","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","linksColors","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","arguments","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","ignoresResizeRatio","position","x","y","bubble","inRange","destroyed","particleUpdate","mover","isEnabled","move","push","insert","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","load","color","hsl","getFillColor","min","max","offset","sizeOffset","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","range","key","res","Math","random","getTriangleFrequency","p3","id1","id2","id3","manualParticles","setDensity","applyDensity","handleClickMode","mode","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"sources":["C:/Users/prana/Downloads/My E Health/demo-3/Text-Summarizer-main/node_modules/tsparticles/esm/Core/Particles.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    async update(delta) {\n        const container = this.container, particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split, options = new ParticlesOptions();\n        options.load(parent.options);\n        const factor = getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this.initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}