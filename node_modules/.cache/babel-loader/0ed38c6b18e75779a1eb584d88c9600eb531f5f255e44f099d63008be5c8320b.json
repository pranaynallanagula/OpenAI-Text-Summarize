{"ast":null,"code":"import { createElement } from 'react';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar _excluded = [\"cdnSuffix\", \"cdnUrl\", \"countryCode\", \"style\", \"svg\"];\nvar DEFAULT_CDN_URL = 'https://cdn.jsdelivr.net/gh/lipis/flag-icons/flags/4x3/';\nvar DEFAULT_CDN_SUFFIX = 'svg';\n// offset between uppercase ascii and regional indicator symbols\nvar OFFSET = 127397;\nvar ReactCountryFlag = function ReactCountryFlag(_ref) {\n  var _ref$cdnSuffix = _ref.cdnSuffix,\n    cdnSuffix = _ref$cdnSuffix === void 0 ? DEFAULT_CDN_SUFFIX : _ref$cdnSuffix,\n    _ref$cdnUrl = _ref.cdnUrl,\n    cdnUrl = _ref$cdnUrl === void 0 ? DEFAULT_CDN_URL : _ref$cdnUrl,\n    countryCode = _ref.countryCode,\n    style = _ref.style,\n    _ref$svg = _ref.svg,\n    svg = _ref$svg === void 0 ? false : _ref$svg,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n  if (svg) {\n    var flagUrl = \"\" + cdnUrl + countryCode.toLowerCase() + \".\" + cdnSuffix;\n    return createElement(\"img\", Object.assign({}, props, {\n      src: flagUrl,\n      style: _extends({\n        display: 'inline-block',\n        width: '1em',\n        height: '1em',\n        verticalAlign: 'middle'\n      }, style)\n    }));\n  }\n  var emoji = countryCode.toUpperCase().replace(/./g, function (_char) {\n    return String.fromCodePoint(_char.charCodeAt(0) + OFFSET);\n  });\n  return createElement(\"span\", Object.assign({\n    role: \"img\"\n  }, props, {\n    style: _extends({\n      display: 'inline-block',\n      fontSize: '1em',\n      lineHeight: '1em',\n      verticalAlign: 'middle'\n    }, style)\n  }), emoji);\n};\nexport default ReactCountryFlag;\nexport { ReactCountryFlag };","map":{"version":3,"names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","_ref","cdnSuffix","_ref$cdnSuffix","_ref$cdnUrl","cdnUrl","countryCode","style","_ref$svg","svg","props","_objectWithoutPropertiesLoose","_excluded","flagUrl","toLowerCase","createElement","Object","assign","src","_extends","display","width","height","verticalAlign","emoji","toUpperCase","replace","_char","String","fromCodePoint","charCodeAt","role","fontSize","lineHeight"],"sources":["C:\\Users\\prana\\Downloads\\My E Health\\demo-3\\Text-Summarizer-main\\node_modules\\react-country-flag\\src\\index.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdn.jsdelivr.net/gh/lipis/flag-icons/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GACnB,yDAAyD;AAC3D,IAAMC,kBAAkB,GAAG,KAAK;AAEhC;AACA,IAAMC,MAAM,GAAG,MAAM;IAoBRC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAAC,IAAA;4BAC3BC,SAAS;IAATA,SAAS,GAAAC,cAAA,cAAGL,kBAAkB,GAAAK,cAAA;IAAAC,WAAA,GAAAH,IAAA,CAC9BI,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAGP,eAAe,GAAAO,WAAA;IACxBE,WAAW,GAAAL,IAAA,CAAXK,WAAW;IACXC,KAAK,GAAAN,IAAA,CAALM,KAAK;IAAAC,QAAA,GAAAP,IAAA,CACLQ,GAAG;IAAHA,GAAG,GAAAD,QAAA,cAAG,KAAK,GAAAA,QAAA;IACRE,KAAK,GAAAC,6BAAA,CAAAV,IAAA,EAAAW,SAAA;EAER,IAAI,OAAON,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAO,IAAI;;EAGb,IAAIG,GAAG,EAAE;IACP,IAAMI,OAAO,QAAMR,MAAM,GAAGC,WAAW,CAACQ,WAAW,EAAE,SAAIZ,SAAW;IAEpE,OACEa,aAAA,QAAAC,MAAA,CAAAC,MAAA,KACMP,KAAK;MACTQ,GAAG,EAAEL,OAAO;MACZN,KAAK,EAAAY,QAAA;QACHC,OAAO,EAAE,cAAc;QACvBC,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE,KAAK;QACbC,aAAa,EAAE;SACZhB,KAAK;OAEV;;EAIN,IAAMiB,KAAK,GAAGlB,WAAW,CACtBmB,WAAW,EAAE,CACbC,OAAO,CAAC,IAAI,EAAE,UAAAC,KAAI;IAAA,OAAIC,MAAM,CAACC,aAAa,CAACF,KAAI,CAACG,UAAU,CAAC,CAAC,CAAC,GAAG/B,MAAM,CAAC;IAAC;EAE3E,OACEgB,aAAA,SAAAC,MAAA,CAAAC,MAAA;IACEc,IAAI,EAAC;KACDrB,KAAK;IACTH,KAAK,EAAAY,QAAA;MACHC,OAAO,EAAE,cAAc;MACvBY,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE,KAAK;MACjBV,aAAa,EAAE;OACZhB,KAAK;MAGTiB,KAAK,CACD;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}