{"ast":null,"code":"import { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport class BaseMover {\n  init(particle) {\n    var _a;\n    const container = particle.container,\n      options = particle.options,\n      spinOptions = options.move.spin;\n    if (spinOptions.enable) {\n      const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = particle.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      const spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    }\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n  move(particle, delta) {\n    var _a, _b, _c;\n    var _d, _e;\n    const particleOptions = particle.options,\n      moveOptions = particleOptions.move;\n    if (!moveOptions.enable) {\n      return;\n    }\n    const container = particle.container,\n      slowFactor = getProximitySpeedFactor(particle),\n      baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n      moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n      maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n      sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n      speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n      diffFactor = 2,\n      moveSpeed = baseSpeed * speedFactor / diffFactor;\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity,\n      gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n    if (gravityOptions.enable && moveSpeed) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n    const velocity = particle.velocity.mult(moveSpeed),\n      maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n    if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n    const zIndexOptions = particle.options.zIndex,\n      zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n      particle.position.addTo(velocity);\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n    applyDistance(particle);\n  }\n}","map":{"version":3,"names":["applyDistance","applyPath","getProximitySpeedFactor","spin","getDistance","getRangeMax","getRangeValue","BaseMover","init","particle","_a","container","options","spinOptions","move","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","isEnabled","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityOptions","gravity","gravityFactor","inverse","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"sources":["C:/Users/prana/Downloads/My E Health/demo-3/Text-Summarizer-main/node_modules/tsparticles/esm/Movers/Base/BaseMover.js"],"sourcesContent":["import { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nimport { getDistance, getRangeMax, getRangeValue } from \"../../Utils/NumberUtils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = particle.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            const spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        applyPath(particle, delta);\n        const gravityOptions = particle.gravity, gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}