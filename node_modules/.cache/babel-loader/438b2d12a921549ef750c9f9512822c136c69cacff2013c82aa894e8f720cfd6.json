{"ast":null,"code":"import { clamp, getDistance, getRangeMax } from \"../../../Utils/NumberUtils\";\nimport { colorMix, colorToHsl, rgbToHsl } from \"../../../Utils/ColorUtils\";\nimport { divMode, divModeExecute, isDivModeEnabled, isInArray, itemFromArray } from \"../../../Utils/Utils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Rectangle } from \"../../../Core/Utils/Rectangle\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      container.bubble.clicking = true;\n    };\n  }\n  isEnabled() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = options.interactivity.events,\n      divs = events.onDiv,\n      divBubble = isDivModeEnabled(\"bubble\", divs);\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n  async interact() {\n    const options = this.container.actualOptions,\n      events = options.interactivity.events,\n      onHover = events.onHover,\n      onClick = events.onClick,\n      hoverEnabled = onHover.enable,\n      hoverMode = onHover.mode,\n      clickEnabled = onClick.enable,\n      clickMode = onClick.mode,\n      divs = events.onDiv;\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n      selectors = document.querySelectorAll(selector);\n    if (!selectors.length) {\n      return;\n    }\n    selectors.forEach(item => {\n      const elem = item,\n        pxRatio = container.retina.pixelRatio,\n        pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n        repulseRadius = elem.offsetWidth / 2 * pxRatio,\n        area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n        query = container.particles.quadTree.query(area);\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = divMode(divs, elem);\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n      bubbleParam = data.bubbleObj.optValue;\n    if (bubbleParam === undefined) {\n      return;\n    }\n    const options = container.actualOptions,\n      bubbleDuration = options.interactivity.modes.bubble.duration,\n      bubbleDistance = container.retina.bubbleModeDistance,\n      particlesParam = data.particlesObj.optValue,\n      pObjBubble = data.bubbleObj.value,\n      pObj = data.particlesObj.value || 0,\n      type = data.type;\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n  clickBubble() {\n    var _a, _b;\n    const container = this.container,\n      options = container.actualOptions,\n      mouseClickPos = container.interactivity.mouse.clickPosition;\n    if (!mouseClickPos) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    const distance = container.retina.bubbleModeDistance,\n      query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n        distMouse = getDistance(pos, mouseClickPos),\n        timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n  hoverBubble() {\n    const container = this.container,\n      mousePos = container.interactivity.mouse.position;\n    if (mousePos === undefined) {\n      return;\n    }\n    const distance = container.retina.bubbleModeDistance,\n      query = container.particles.quadTree.queryCircle(mousePos, distance);\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n        pointDistance = getDistance(pos, mousePos),\n        ratio = 1 - pointDistance / distance;\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n      if (container.interactivity.status === Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n      modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n    if (modeSize === undefined) {\n      return;\n    }\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n    const container = this.container,\n      options = container.actualOptions,\n      modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n    if (!modeOpacity) {\n      return;\n    }\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n      if (!modeColor) {\n        return;\n      }\n      const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n      particle.bubble.finalColor = colorToHsl(bubbleColor);\n    }\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n}","map":{"version":3,"names":["clamp","getDistance","getRangeMax","colorMix","colorToHsl","rgbToHsl","divMode","divModeExecute","isDivModeEnabled","isInArray","itemFromArray","Circle","Constants","ExternalInteractorBase","Rectangle","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","query","particles","quadTree","contains","getPosition","modes","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","Date","getTime","clickTime","sizeData","bubbleModeSize","size","opacityData","mousePos","pointDistance","status","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor"],"sources":["C:/Users/prana/Downloads/My E Health/demo-3/Text-Summarizer-main/node_modules/tsparticles/esm/Interactions/External/Bubble/Bubbler.js"],"sourcesContent":["import { clamp, getDistance, getRangeMax } from \"../../../Utils/NumberUtils\";\nimport { colorMix, colorToHsl, rgbToHsl } from \"../../../Utils/ColorUtils\";\nimport { divMode, divModeExecute, isDivModeEnabled, isInArray, itemFromArray } from \"../../../Utils/Utils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Rectangle } from \"../../../Core/Utils/Rectangle\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = colorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}