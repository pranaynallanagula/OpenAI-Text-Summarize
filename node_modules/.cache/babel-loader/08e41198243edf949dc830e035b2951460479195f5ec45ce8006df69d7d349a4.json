{"ast":null,"code":"import { calcEasing, clamp, getDistances } from \"../../../Utils/NumberUtils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Vector } from \"../../../Core/Utils/Vector\";\nimport { isInArray } from \"../../../Utils/Utils\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions;\n      if (mode !== \"attract\") {\n        return;\n      }\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n      container.attract.clicking = true;\n      container.attract.count = 0;\n      for (const particle of container.attract.particles) {\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n          container.attract.clicking = false;\n        }\n      }, options.interactivity.modes.attract.duration * 1000);\n    };\n  }\n  isEnabled() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = options.interactivity.events;\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode,\n      clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n  reset() {}\n  async interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouseMoveStatus = container.interactivity.status === Constants.mouseMoveEvent,\n      events = options.interactivity.events,\n      hoverEnabled = events.onHover.enable,\n      hoverMode = events.onHover.mode,\n      clickEnabled = events.onClick.enable,\n      clickMode = events.onClick.mode;\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n  processAttract(position, attractRadius, area) {\n    const container = this.container;\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    const query = container.particles.quadTree.query(area);\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n  clickAttract() {\n    const container = this.container;\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n      container.attract.count++;\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n      if (!mousePos) {\n        return;\n      }\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n    return;\n  }\n}","map":{"version":3,"names":["calcEasing","clamp","getDistances","Circle","Constants","ExternalInteractorBase","Vector","isInArray","Attractor","constructor","container","attract","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","isEnabled","mouse","events","position","onHover","enable","clickPosition","onClick","hoverMode","clickMode","reset","interact","mouseMoveStatus","status","mouseMoveEvent","hoverEnabled","clickEnabled","hoverAttract","clickAttract","mousePos","attractRadius","retina","attractModeDistance","processAttract","x","y","area","attractOptions","query","quadTree","dx","dy","distance","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"sources":["C:/Users/prana/Downloads/My E Health/demo-3/Text-Summarizer-main/node_modules/tsparticles/esm/Interactions/External/Attract/Attractor.js"],"sourcesContent":["import { calcEasing, clamp, getDistances } from \"../../../Utils/NumberUtils\";\nimport { Circle } from \"../../../Core/Utils/Circle\";\nimport { Constants } from \"../../../Core/Utils/Constants\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { Vector } from \"../../../Core/Utils/Vector\";\nimport { isInArray } from \"../../../Utils/Utils\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions;\n            if (mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, options.interactivity.modes.attract.duration * 1000);\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    reset() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === Constants.mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container;\n        const attractOptions = container.actualOptions.interactivity.modes.attract;\n        const query = container.particles.quadTree.query(area);\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}